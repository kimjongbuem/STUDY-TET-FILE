union semun{ // 유니언 //
   int val;
   struct   semid_ds *buf; // 세마퍼 집합을 위해 커널에 의해 관리되는 자료구조임.
   unsigned short int *arrary;
}; // 내용 대기

srand((unsigned int)getpid()); // 내가볼 땐 겟피드 함수로 호출 프로세스 ID를 돌려줍니다. 


sem_id = semget((key_t)1234, 1 , 0666 | IPC_CREAT); // 세마포어 집합을 생성하거나 이미 생성된 세마포어 접근위해 사용세마포어는 공유 자원을 동시에 여러 프로세스가 사용하는 것을 막고, 
오직 자원을 하나의 프로세스만 사용할 수 있도록 보장해 주는 방법입니다. 즉, 여러 프로세스 중 공유 자원을 자신이 사용할 수 있는지 있다면 작업이 끝나기 전까지 
다른 프로세스가 공유 자원을 사용할 수 없도록 다른 프로세스의 접근을 제어하는 방법을 세마포어를 이용하여 구현할 수 있습니다.
(각 매개분수 특징 key_t는 세머 포어를 식별하는 집합번호, 그다음 1은 세마 포어 집합 내의 세마포어 개수로 접근 제한하려는 자원개수, semflg 동작옵션 key에 해당하는 공유 세마포어가 없다면 새로 생성, 없다면 접근 권한지정.


if(argc > 1){
	if(!set_semvalue()){
		fprintf(stderr, "Failed to initialize semaphore\n");
		exit(EXIT_FAILURE);
	}
	op_char='X';
	sleep(2);
}
여기서 set_semvalue() 메서드를 호출하면서, semctl 메서드를 호출한다. 만약 0이나오면 실패다.
	
static int set_semvalue(void){
	union semun sem_union;
	 sem_union.val = 1;
	if (semctl(sem_id, 0, SETVAL, sem_union) == -1)  return 0;
	 return 1;
}
그럼 semctl 메서드를 알아보자. // 세마포어 제어 메서드
매겨변수 1. 세마포어 식별하는 집합 번호 , 2. 집합내에 세마포어 위치 3 세마포어 값설정, 4 semun구조체
이부분이 첫번째에서 실행에서 X로 ... 두번째는 그대로 O

for(i = 0 ; i<10;i++){
		if (!semaphore_p()) exit(EXIT_FAILURE);
		printf("%c", op_char);fflush(stdout);
		pause_time = rand() % 3;
		sleep(pause_time);		
		 printf("%c", op_char);fflush(stdout);
		 if (!semaphore_v()) exit(EXIT_FAILURE);
		 pause_time = rand() % 2;
		sleep(pause_time);
}

// 내가 정의해야할 메서드들 //
static int semaphore_p(void){

}
static int semaphore_v(void){

}

// 끝나는 부분 나중에 생각 // 
	printf("\n%d - finished\n", getpid());
	if (argc > 1) {
		sleep(10);
		 del_semvalue();
	}
	exit(EXIT_SUCCESS);
}

static void del_semvalue(void){
         union semun sem_union;
         if (semctl(sem_id, 0, IPC_RMID, sem_union) == -1)
                 fprintf(stderr, "Failed to delete semaphore\n");
}






